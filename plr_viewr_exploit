while not game:IsLoaded() do 
	task.wait(1)
end

local succ, err = pcall(function()
	-- üåê Global version & GUI reference
	getgenv().PLRViewerVersion = getgenv().PLRViewerVersion or "0.0.0"
	getgenv().PLRViewerGui = getgenv().PLRViewerGui or nil

	local ScriptVersion = "A-0.0.0"

	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local CoreGuiSuccess, CoreGuiResult = pcall(function()
		return game:GetService("CoreGui")
	end)

	-- CoreGui access checker
	local function canAccessCore()
		if not CoreGuiSuccess or not CoreGuiResult then return false end
		return CoreGuiResult:FindFirstChild("RobloxGui") ~= nil
	end

	local PARENT = (CoreGuiSuccess and canAccessCore()) and CoreGuiResult or LocalPlayer:WaitForChild("PlayerGui")

	-- Version compare
	local function compareVersions(v1, v2)
		v1 = v1:gsub("^[^%d]*", "")
		v2 = v2:gsub("^[^%d]*", "")
		local p1, p2 = {}, {}
		for num in v1:gmatch("%d+") do table.insert(p1, tonumber(num)) end
		for num in v2:gmatch("%d+") do table.insert(p2, tonumber(num)) end
		for i = 1, math.max(#p1, #p2) do
			local n1, n2 = p1[i] or 0, p2[i] or 0
			if n1 < n2 then return -1 elseif n1 > n2 then return 1 end
		end
		return 0
	end

	-- Version check
	if compareVersions(getgenv().PLRViewerVersion, ScriptVersion) >= 0 then
		print("PLRViewer is already up-to-date globally")
	else
		print("Updating PLRViewer globally")
		getgenv().PLRViewerVersion = ScriptVersion
	end

	-- Cleanup if GUI exists
	if getgenv().PLRViewerGui and getgenv().PLRViewerGui.Parent then
		for _, child in ipairs(getgenv().PLRViewerGui:GetChildren()) do
			if child:GetAttribute("canBeUsed") == true then
				child:Destroy()
			end
		end
	end

	-- Create or reuse GUI
	local GuiMain = getgenv().PLRViewerGui or Instance.new("ScreenGui")
	GuiMain.Name = "PLRViewRGui"
	GuiMain.ResetOnSpawn = false
	GuiMain.IgnoreGuiInset = true
	GuiMain:SetAttribute("Version", ScriptVersion)
	GuiMain.Enabled = true
	GuiMain.Parent = PARENT
	getgenv().PLRViewerGui = GuiMain

	-- Version label
	local versionLabel = Instance.new("TextLabel")
	versionLabel.Size = UDim2.new(1,0,0,20)
	versionLabel.Position = UDim2.new(0,10,0,10)
	versionLabel.BackgroundTransparency = 1
	versionLabel.TextColor3 = Color3.new(1,1,1)
	versionLabel.Font = Enum.Font.SourceSansBold
	versionLabel.TextSize = 18
	versionLabel.TextXAlignment = Enum.TextXAlignment.Left
	versionLabel.Text = "PLRViewer Version: "..ScriptVersion
	versionLabel.ZIndex = 2
	versionLabel:SetAttribute("canBeUsed", true)
	versionLabel.Parent = GuiMain

	-- Toggle button
	local toggleButton = Instance.new("TextButton")
	toggleButton.Size = UDim2.new(0,200,0,50)
	toggleButton.Position = UDim2.new(0.5,0,1,0)
	toggleButton.AnchorPoint = Vector2.new(0.5,1)
	toggleButton.Text = "Toggle Player List"
	toggleButton:SetAttribute("canBeUsed", true)
	toggleButton.Parent = GuiMain

	-- Teleport button
	local teleportButton = Instance.new("TextButton")
	teleportButton.Size = UDim2.new(0,200,0,50)
	teleportButton.Position = UDim2.new(0.5,0,1,-60)
	teleportButton.AnchorPoint = Vector2.new(0.5,1)
	teleportButton.Text = "Teleport to Player"
	teleportButton:SetAttribute("canBeUsed", true)
	teleportButton.Parent = GuiMain

	-- Scrolling frame
	local mainFrame = Instance.new("ScrollingFrame")
	mainFrame.Size = UDim2.new(0.4,0,0.8,0)
	mainFrame.BackgroundTransparency = 0.5
	mainFrame.ScrollBarThickness = 8
	mainFrame.Visible = false
	mainFrame:SetAttribute("canBeUsed", true)
	mainFrame.Parent = GuiMain

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.Name
	layout.Padding = UDim.new(0,5)
	layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	layout.VerticalAlignment = Enum.VerticalAlignment.Top
	layout.Parent = mainFrame

	-- State
	local buttonToPlayer = {}
	local selectedButton = nil
	local activeConnections = {}

	-- Teleport
	local function teleportBehindPlayer(targetPlayer)
		if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
		if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

		local targetHRP = targetPlayer.Character.HumanoidRootPart
		local myHRP = LocalPlayer.Character.HumanoidRootPart

		local randomAngle = math.rad(math.random(0,360))
		local offset = CFrame.Angles(0, randomAngle, 0) * CFrame.new(0,0,5)
		local finalPos = (targetHRP.CFrame * offset).Position

		myHRP.CFrame = CFrame.new(finalPos, targetHRP.Position)
	end

	teleportButton.Activated:Connect(function()
		if selectedButton and buttonToPlayer[selectedButton] then
			teleportBehindPlayer(buttonToPlayer[selectedButton])
		else
			warn("No player selected to teleport to!")
		end
	end)

	-- Clear conns
	local function clearConnections()
		for _, conn in ipairs(activeConnections) do
			if conn.Connected then conn:Disconnect() end
		end
		table.clear(activeConnections)
	end

	-- Refresh
	local function refreshList()
		clearConnections()
		for _, child in ipairs(mainFrame:GetChildren()) do
			if child:IsA("TextButton") then
				child:Destroy()
			end
		end
		buttonToPlayer = {}

		for _, plr in ipairs(Players:GetPlayers()) do
			if plr ~= LocalPlayer and plr.Character and plr.Character:IsDescendantOf(workspace) then
				local btn = Instance.new("TextButton")
				btn.Size = UDim2.new(1,0,0,30)
				btn.Text = plr.Name
				btn.BackgroundColor3 = Color3.fromRGB(255,255,255)
				btn.Parent = mainFrame

				local conn = btn.Activated:Connect(function()
					if selectedButton == btn then
						btn.BackgroundColor3 = Color3.fromRGB(255,255,255)
						selectedButton = nil
						print("Deselected:", plr.Name)
					else
						if selectedButton then
							selectedButton.BackgroundColor3 = Color3.fromRGB(255,255,255)
						end
						selectedButton = btn
						btn.BackgroundColor3 = Color3.fromRGB(0,255,0)
						print("Selected:", plr.Name)
					end
				end)

				table.insert(activeConnections, conn)
				buttonToPlayer[btn] = plr
			end
		end
	end

	Players.PlayerAdded:Connect(refreshList)
	Players.PlayerRemoving:Connect(refreshList)

	toggleButton.Activated:Connect(function()
		refreshList()
		mainFrame.Visible = not mainFrame.Visible
	end)

	-- Initial
	refreshList()
end)

if not succ and err then
	warn("PLRViewer Warning: "..tostring(err))
end
